ft_isalpha.c

#include <stdio.h>
#include <ctype.h>

int main(void)
{
    int c;
    c = 'a';
    printf("Result when alpha character is passed (with ft): %d\n", ft_isalpha(c));
    printf("Result when alpha character is passed (with og): %d\n", isalpha(c));

    c = '4';
    printf("Result when numeric character is passed (with ft): %d\n", ft_isalpha(c));
    printf("Result when numeric character is passed (with og): %d\n", isalpha(c));

    c = ' ';
    printf("Result when nothing is passed (with ft): %d\n", ft_isalpha(c));
    printf("Result when nothing is passed (with og): %d\n", isalpha(c));

    return 0;
}

ft_isdigit.c

#include <stdio.h>
#include <ctype.h>

int main(void)
{
    int c;
    c = '5';
    printf("Result when numeric character is passed (with ft): %d\n", ft_isdigit(c));
    printf("Result when numeric character is passed (with og): %d\n", isdigit(c));

    c = '+';
    printf("Result when non-numeric character is passed (with ft): %d\n", ft_isdigit(c));
    printf("Result when non-numeric character is passed (with og): %d\n", isdigit(c));

    c = ' ';
    printf("Result when nothing is passed (with ft): %d\n", ft_isdigit(c));
    printf("Result when nothing is passed (with og): %d\n", isdigit(c));

    return 0;
}

ft_isalnum.c

#include <stdio.h>
#include <ctype.h>

int main(void)
{
    int c;
    c = '5';
    printf("Result when numeric character is passed (with ft): %d\n", ft_isalnum(c));
    printf("Result when numeric character is passed (with og): %d\n", isalnum(c));

	c = 'a';
    printf("Result when alpha character is passed (with ft): %d\n", ft_isalnum(c));
    printf("Result when alpha character is passed (with og): %d\n", isalnum(c));
    
	c = '+';
    printf("Result when non-numeric character is passed (with ft): %d\n", ft_isalnum(c));
    printf("Result when non-numeric character is passed (with og): %d\n", isalnum(c));

    c = ' ';
    printf("Result when nothing is passed (with ft): %d\n", ft_isalnum(c));
    printf("Result when nothing is passed (with og): %d\n", isalnum(c));

    return 0;
}

ft_isascii.c

#include <stdio.h>
#include <ctype.h>

int main(void)
{
    int c;
    c = '5';
    printf("Result when numeric character is passed (with ft): %d\n", ft_isascii(c));
    printf("Result when numeric character is passed (with og): %d\n", isascii(c));

	c = 'a';
    printf("Result when alpha character is passed (with ft): %d\n", ft_isascii(c));
    printf("Result when alpha character is passed (with og): %d\n", isascii(c));

    c = '+';
    printf("Result when non-numeric character is passed (with ft): %d\n", ft_isascii(c));
    printf("Result when non-numeric character is passed (with og): %d\n", isascii(c));

    c = ' ';arg

ft_isprint.c

#include <stdio.h>
#include <ctype.h>

int main(void)
{
    int c;
    c = '5';
    printf("Result when numeric character is passed (with ft): %d\n", ft_isprint(c));
    printf("Result when numeric character is passed (with og): %d\n", isprint(c));

	c = 'a';
    printf("Result when alpha character is passed (with ft): %d\n", ft_isprint(c));
    printf("Result when alpha character is passed (with og): %d\n", isprint(c));

    c = '+';
    printf("Result when non-numeric character is passed (with ft): %d\n", ft_isprint(c));
    printf("Result when non-numeric character is passed (with og): %d\n", isprint(c));
    
    c = '\nmain()';
    printf("Result when a non-printable character is passed: %d\n", ft_isprint(c));
    printf("Result when non-numeric character is passed (with og): %d\n", isprint(c));

    c = ' ';
    printf("Result when nothing is passed (with ft): %d\n", ft_isprint(c));
    printf("Result when nothing is passed (with og): %d\n", isprint(c));

    return 0;
}

ft_toupper.c

#include <stdio.h>
#include <ctype.h>

int	main(void)
{
	char c;

    c = 'm';
	printf("%c -> %c\n", c, ft_toupper(c));
    printf("%c -> %c\n", c, toupper(c));

    c = 'D';
	printf("%c -> %c\n", c, ft_toupper(c));
    printf("%c -> %c\n", c, toupper(c));

    c = '9';
	printf("%c -> %c\n", c, ft_toupper(c));
    printf("%c -> %c\n", c, toupper(c));

    return 0;
}

ft_tolower.c

#include <stdio.h>
#include <cmain()
    c = 'm';
	printf("%c -> %c\n", c, ft_tolower(c));
    printf("%c -> %c\n", c, tolower(c));

    c = 'D';
	printf("%c -> %c\n", c, ft_tolower(c));
    printf("%c -> %c\n", c, tolower(c));

    c = '9';
	printf("%c -> %c\n", c, ft_tolower(c));
    printf("%c -> %c\n", c, tolower(c));

    return 0;
}

ft_strlen.c

#include <string.h>

int	main(void)
{
	char	*str  = "Hello World !";

	printf("Length of the string (with ft) = %zu\n",ft_strlen(str));
	printf("Length of the string (with og) = %zu\n",strlen(str));

	return 0;
}

ft_atoi.c

#include <stdio.h>
#include <stdlib.h>

int	main(int argc, char *argv[])
{
	if (argc == 2)
	{
		printf("%d\n", ft_atoi(argv[1]));
		printf("%d\n", atoi(argv[1]));
	}
}

ft_strlcpy.c

#include <bsd/string.h>

int	main(void)
{
	char	dst[10] = " ";
	char	dest2[10] = " "; 
	char	src[20] = "HelloTheWorld";

	printf("%ld | %s\n%ld |stdio.h is used by almost every C program.
}

ft_strlcat.c

#include <bsd/string.h>

int    main(void)
{
    char dst[200] = "Manon";
    char dest2[200] = "Manon";
    char src[] = "Hello world"; 
    printf("%ld | %s\n%ld | %s", ft_strlcat(dst, src, 0), dst, strlcat(dest2, src, 0), dest2);
	return (0);
}

ft_strncmp.c

#include <string.h>
int	main (void)
{
	char 	str1[] = "victor", str2[] = "manon";
	int		result, result2;
	result = ft_strncmp(str1, str2, 5);
	result2 = strncmp(str1, str2, 5);
	printf("ft_strncmp(str1, str2) = %d\n", result);
	printf("strncmp(str1, str2) = %d\n", result2);
	return (0);
}

ft_strchr.c

#include <string.h>

int	main(void)
{
	char s[] = "manon";
	char c = 'm';
   	char *p, *p2;
	p = ft_strchr(s, c);
	p2 = strchr(s, c);
	printf("ft_strchr(s, c) = %s\n", p);
	printf("strchr(s, c) = %s", p2);
	return (0);
}

ft_strrchr.c

#include <string.h>

int	main(void)
{
	char s[] = "tripouille";
	char c = 't';
	char *p, *p2;
	p = ft_strrchr(s, c);
	p2 = strrchr(s, c);
	printf("ft_strrchr(s, c) = %s\n", p);
	printf("strrchr(s, c) = %s\n", p2);
	return (0);
}

ft_strnstr.c

#include <bsd/string.h>

int	main(void)
{
	char str[] = "hello the big world and hello manon";
	char searched_str[] = "the";

	if (ft_strnstr(str, searched_str, 8) == NULL)
		printf("NULL FT\n");
	else
		printf("%s\n", ft_strnstr(str, searched_str, 8));
	if (strnstr(str, searched_str, 8) == NULL)
		printf("NULL OG");
	else
		printf("%s\n", strnstr(str, searched_str, 8));
	return (0);

}

ft_memset.c

#include <string.h>

int	main(void)
{
	char str[50] = "Manon est à 42, à Paris, en France.";
	char str2[50] = "Manon est à 42, à Paris, en France.";

	printf("Before    memset(): %s\n", str);
	printf("Before ft_memset(): %s\n", str2);

	memset(str, '.', 50);
	ft_memset(str2, '.', 50);

	printf("After    memset():  %s\n", str);
	printf("After ft_memset():  %s\n", str2);

	return (0);
}

ft_bzero.c

#include <string.h>

int	main(void)
{
	char str[50] = "Manon est à 42, à Paris, en France.";
	char str2[50] = "Manon est à 42, à Paris, en France.";

	printf("Before    bzero(): %s\n", str);
	printf("Before ft_bzero(): %s\n", str2);

	bzero(str, 1);
	ft_bzero(str2, 1);

	printf("After    bzero():  %s\n", str);
	printf("After ft_bzero():  %s\n", str2);

	return (0);
}

ft_memcpy.c

#include <string.h>

int	main (void)
{
	char str1[] = "manon";
	char str2[] = "hello world";
	char str11[] = "manon";
	char str22[] = "hello world";

	printf("str1 before ft_memcpy : %s\n", str1);
	printf("str1 before memcpy : %s\n", str11);
	printf("str2 before ft_memcpy : %s\n", str2);
	printf("str2 before memcpy : %s\n", str22);
	ft_memcpy (str1, str2, 20);
	memcpy (str11, str22, 20);
	printf("str1 after ft_memcpy : %s \n", str1);
	printf("str1 after memcpy : %s \n", str11);
	printf("str2 after ft_memcpy : %s \n", str2);
	printf("str2 after memcpy : %s \n", str22);
	return (0);
}

ft_memmove.c

#include <string.h>

int main(void)
{
    char dst[5] = "hello";
    const char src[]  = "manonlbn";
	  char destt[5] = "hello";
    const char srcc[]  = "manonlbn";
    printf("Before ft_memmove >> dst = %s, src = %s\n", dst, src);
    ft_memmove(dst, src, 8);
    printf("After ft_memmove >> dst = %s, src = %s\n", dst, src);
    printf("Before memmove >> dst = %s, src = %s\n", destt, srcc);
    memmove(destt, srcc, 8);
    printf("After memmove >> dst = %s, src = %s\n", destt, srcc);
    return (0);
}

ft_memchr.c

#include <string.h>

int	main(void)
{
	char	s[] = "treslongmot";
	char	*ptr = ft_memchr(s, 's', 5);
	char	c[] = "treslongmot";
	char	*ptrr = memchr(s, 's', 5);

	printf("FT_MEMCHR\n");
	if (ptr != NULL)
	{
		printf ("character found at position %ld\n", ptr - s + 1);
		printf ("search character found:  %s\n", ptr);
	}
	else
		printf ("search character not found\n");
	printf("MEMCHR\n");
	if (ptrr != NULL)
	{
		printf ("character found at position %ld\n", ptrr - c + 1);
		printf ("search character found:  %s\n", ptrr);
	}
	else
		printf ("search character not found\n");	
	return (0);
}

ft_memcmp.c

#include <string.h>

int	main(void)
{
	int	ret;
	int	ret2;

	ret = ft_memcmp("t\200", "t\0", 2);
	ret2 = memcmp("t\200", "t\0", 2);
	printf("ft_memcmp = %d\n", ret);
	printf("memcmp = %d\n", ret2);
	return (0);
}

ft_strdup.c

#include <stdio.h>
#include <string.h>

int    main(void)
{
    char source[] = "manon est à 42 !";

    char *target = strdup(source);
    char *target2 = ft_strdup(source);

    printf("strdup : %s\n", target);
    printf("ft_strdup : %s\n", target2);
    return (0);
}

ft_calloc.c

#include <stdio.h>
#include <assert.h>

#define INT_NUMBER 10

int	main(void) {
    
    int i;
    int *pointer = (int *) ft_calloc( INT_NUMBER, sizeof(int) );

    assert( pointer != NULL );

    for ( i=0; i<INT_NUMBER-1; i++ ) {
        pointer[i] = i;
    }

    for (i=0; i<INT_NUMBER; i++ ) {
        printf( "%d ", pointer[i] );
    }
    printf( "\n" );

    free( pointer );

    return 0;
}

ft_substr.c

int	main(void)
{
	char	*src;
	char	*dst;
	int		start;
	int		len;

	src = "hello tout le monde";
	start = 6;
	len = 19;
	dst = ft_substr(src, start, len);
	printf("%s\n", dst);
	return (0);
}

ft_strjoin.c

int	main(void)
{
	char	*s1;
	char	*s2;
	char	*s4;

	s1 = "Hello";
	s2 = "World";
	s4 = ft_strjoin(s1, s2);
	printf("%s\n", s4);
}

ft_strtrim.c

int	main(void)
{
	char	*s1;
	char	*set;
	char	*s3;

	s1 = "hello tout le monde";
	set = "edhn";
	s3 = ft_strtrim(s1, set);
	printf("%s\n", s3);
}

ft_split.c

int	main(void)
{
	char	**split;
	int		i;

	printf("test 1\n");
	split = ft_split("A la claire fontaine", ' ');
	i = 0;
	if (split)
		while (split[i])
			printf("[%s]", split[i++]);
	else
		printf("NULL");
	printf("\n");

	printf("test 2\n");
	split = ft_split("   A     la     claire fontaine    ", ' ');
	i = 0;
	if (split)
		while (split[i])
			printf("[%s]", split[i++]);
	else
		printf("NULL");
	printf("\n");

	printf("test 3\n");
	split = ft_split("A", ' ');
	i = 0;
	if (split)
		while (split[i])
			printf("[%s]", split[i++]);
	else
		printf("NULL");
	printf("\n");

	printf("test 4\n");
	split = ft_split(NULL, ' ');
	i = 0;
	if (split)
		while (split[i])
			printf("[%s]", split[i++]);
	else
		printf("NULL");
	printf("\n");
}